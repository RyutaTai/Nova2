//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer PRIMITIVE_CONSTANT_BUFFER
// {
//
//   row_major float4x4 world;          // Offset:    0 Size:    64
//   int material;                      // Offset:   64 Size:     4 [unused]
//   bool hasTangent;                   // Offset:   68 Size:     4 [unused]
//   int skin;                          // Offset:   72 Size:     4
//   int pad;                           // Offset:   76 Size:     4 [unused]
//
// }
//
// cbuffer SCENE_CONSTANT_BUFFER
// {
//
//   row_major float4x4 viewProjection; // Offset:    0 Size:    64
//   float4 lightDirection;             // Offset:   64 Size:    16 [unused]
//   float4 cameraPosition;             // Offset:   80 Size:    16 [unused]
//
// }
//
// cbuffer PRIMITIVE_JOINT_CONSTANTS
// {
//
//   row_major float4x4 jointMatrices[512];// Offset:    0 Size: 32768
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// PRIMITIVE_CONSTANT_BUFFER         cbuffer      NA          NA            cb0      1 
// SCENE_CONSTANT_BUFFER             cbuffer      NA          NA            cb1      1 
// PRIMITIVE_JOINT_CONSTANTS         cbuffer      NA          NA            cb2      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// NORMAL                   0   xyzw        1     NONE   float   xyz 
// TANGENT                  0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 0   xy          3     NONE   float   xy  
// JOINTS                   0   xyzw        4     NONE    uint   xyzw
// JOINTS                   1   xyzw        5     NONE    uint   xyzw
// WEIGHTS                  0   xyzw        6     NONE   float   xyzw
// WEIGHTS                  1   xyzw        7     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// POSITION                 0   xyzw        1     NONE   float   xyzw
// NORMAL                   0   xyzw        2     NONE   float   xyzw
// TANGENT                  0   xyzw        3     NONE   float   xyzw
// TEXCOORD                 0   xy          4     NONE   float   xy  
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[5], immediateIndexed
dcl_constantbuffer CB1[4], immediateIndexed
dcl_constantbuffer CB2[2048], dynamicIndexed
dcl_input v0.xyz
dcl_input v1.xyz
dcl_input v2.xyzw
dcl_input v3.xy
dcl_input v4.xyzw
dcl_input v5.xyzw
dcl_input v6.xyzw
dcl_input v7.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xy
dcl_temps 14
ilt r0.x, l(-1), cb0[4].z
if_nz r0.x
  dp4 r0.x, v6.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  dp4 r0.y, v7.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  add r0.x, r0.y, r0.x
  div r1.xyzw, v6.xyzw, r0.xxxx
  ishl r2.xyzw, v4.xyzw, l(2, 2, 2, 2)
  mul r3.xyzw, r1.xxxx, cb2[r2.x + 0].xyzw
  mul r4.xyzw, r1.xxxx, cb2[r2.x + 1].xyzw
  mul r5.xyzw, r1.xxxx, cb2[r2.x + 2].xywz
  mul r6.xyw, r1.xxxx, cb2[r2.x + 3].xyxz
  mul r7.xyzw, r1.yyyy, cb2[r2.y + 0].xyzw
  mul r8.xyzw, r1.yyyy, cb2[r2.y + 1].xyzw
  mul r9.xyzw, r1.yyyy, cb2[r2.y + 2].xywz
  mul r10.xyw, r1.yyyy, cb2[r2.y + 3].xyxz
  mov r11.x, r3.x
  mov r11.y, r4.x
  mov r11.z, r5.x
  mov r11.w, r6.x
  mov r12.x, r7.x
  mov r12.y, r8.x
  mov r12.z, r9.x
  mov r12.w, r10.x
  add r11.xyzw, r11.xyzw, r12.xyzw
  mov r12.x, r3.y
  mov r12.y, r4.y
  mov r12.z, r5.y
  mov r12.w, r6.y
  mov r13.x, r7.y
  mov r13.y, r8.y
  mov r13.z, r9.y
  mov r13.w, r10.y
  add r12.xyzw, r12.xyzw, r13.xyzw
  mov r6.x, r3.z
  mov r6.y, r4.z
  mov r6.z, r5.w
  mov r10.x, r7.z
  mov r10.y, r8.z
  mov r10.z, r9.w
  add r6.xyzw, r6.xyzw, r10.xyzw
  mov r5.x, r3.w
  mov r5.y, r4.w
  mov r9.x, r7.w
  mov r9.y, r8.w
  add r0.yzw, r5.xxyz, r9.xxyz
  mul r3.xyzw, r1.zzzz, cb2[r2.z + 0].xyzw
  mul r4.xyzw, r1.zzzz, cb2[r2.z + 1].xyzw
  mul r5.xyzw, r1.zzzz, cb2[r2.z + 2].xywz
  mul r7.xyw, r1.zzzz, cb2[r2.z + 3].xyxz
  mov r8.x, r3.x
  mov r8.y, r4.x
  mov r8.z, r5.x
  mov r8.w, r7.x
  add r8.xyzw, r8.xyzw, r11.xyzw
  mov r9.x, r3.y
  mov r9.y, r4.y
  mov r9.z, r5.y
  mov r9.w, r7.y
  add r9.xyzw, r9.xyzw, r12.xyzw
  mov r7.x, r3.z
  mov r7.y, r4.z
  mov r7.z, r5.w
  add r6.xyzw, r6.xyzw, r7.xyzw
  mov r5.x, r3.w
  mov r5.y, r4.w
  add r0.yzw, r0.yyzw, r5.xxyz
  mul r3.xyzw, r1.wwww, cb2[r2.w + 0].xyzw
  mul r4.xyzw, r1.wwww, cb2[r2.w + 1].xyzw
  mul r5.xyzw, r1.wwww, cb2[r2.w + 2].xywz
  mul r1.xyw, r1.wwww, cb2[r2.w + 3].xyxz
  mov r2.x, r3.x
  mov r2.y, r4.x
  mov r2.z, r5.x
  mov r2.w, r1.x
  add r2.xyzw, r2.xyzw, r8.xyzw
  mov r7.x, r3.y
  mov r7.y, r4.y
  mov r7.z, r5.y
  mov r7.w, r1.y
  add r7.xyzw, r7.xyzw, r9.xyzw
  mov r1.x, r3.z
  mov r1.y, r4.z
  mov r1.z, r5.w
  add r1.xyzw, r1.xyzw, r6.xyzw
  mov r5.x, r3.w
  mov r5.y, r4.w
  add r0.yzw, r0.yyzw, r5.xxyz
  div r3.xyzw, v7.xyzw, r0.xxxx
  ishl r4.xyzw, v5.xyzw, l(2, 2, 2, 2)
  mul r5.xyzw, r3.xxxx, cb2[r4.x + 0].xyzw
  mul r6.xyzw, r3.xxxx, cb2[r4.x + 1].xyzw
  mul r8.xyzw, r3.xxxx, cb2[r4.x + 2].xywz
  mul r9.xyw, r3.xxxx, cb2[r4.x + 3].xyxz
  mov r10.x, r5.x
  mov r10.y, r6.x
  mov r10.z, r8.x
  mov r10.w, r9.x
  add r2.xyzw, r2.xyzw, r10.xyzw
  mov r10.x, r5.y
  mov r10.y, r6.y
  mov r10.z, r8.y
  mov r10.w, r9.y
  add r7.xyzw, r7.xyzw, r10.xyzw
  mov r9.x, r5.z
  mov r9.y, r6.z
  mov r9.z, r8.w
  add r1.xyzw, r1.xyzw, r9.xyzw
  mov r8.x, r5.w
  mov r8.y, r6.w
  add r0.xyz, r0.yzwy, r8.xyzx
  mul r5.xyzw, r3.yyyy, cb2[r4.y + 0].xyzw
  mul r6.xyzw, r3.yyyy, cb2[r4.y + 1].xyzw
  mul r8.xyzw, r3.yyyy, cb2[r4.y + 2].xywz
  mul r9.xyw, r3.yyyy, cb2[r4.y + 3].xyxz
  mov r10.x, r5.x
  mov r10.y, r6.x
  mov r10.z, r8.x
  mov r10.w, r9.x
  add r2.xyzw, r2.xyzw, r10.xyzw
  mov r10.x, r5.y
  mov r10.y, r6.y
  mov r10.z, r8.y
  mov r10.w, r9.y
  add r7.xyzw, r7.xyzw, r10.xyzw
  mov r9.x, r5.z
  mov r9.y, r6.z
  mov r9.z, r8.w
  add r1.xyzw, r1.xyzw, r9.xyzw
  mov r8.x, r5.w
  mov r8.y, r6.w
  add r0.xyz, r0.xyzx, r8.xyzx
  mul r5.xyzw, r3.zzzz, cb2[r4.z + 0].xyzw
  mul r6.xyzw, r3.zzzz, cb2[r4.z + 1].xyzw
  mul r8.xyzw, r3.zzzz, cb2[r4.z + 2].xywz
  mul r9.xyw, r3.zzzz, cb2[r4.z + 3].xyxz
  mov r10.x, r5.x
  mov r10.y, r6.x
  mov r10.z, r8.x
  mov r10.w, r9.x
  add r2.xyzw, r2.xyzw, r10.xyzw
  mov r10.x, r5.y
  mov r10.y, r6.y
  mov r10.z, r8.y
  mov r10.w, r9.y
  add r7.xyzw, r7.xyzw, r10.xyzw
  mov r9.x, r5.z
  mov r9.y, r6.z
  mov r9.z, r8.w
  add r1.xyzw, r1.xyzw, r9.xyzw
  mov r8.x, r5.w
  mov r8.y, r6.w
  add r0.xyz, r0.xyzx, r8.xyzx
  mul r5.xyzw, r3.wwww, cb2[r4.w + 0].xyzw
  mul r6.xyzw, r3.wwww, cb2[r4.w + 1].xyzw
  mul r8.xyzw, r3.wwww, cb2[r4.w + 2].xywz
  mul r3.xyw, r3.wwww, cb2[r4.w + 3].xyxz
  mov r4.x, r5.x
  mov r4.y, r6.x
  mov r4.z, r8.x
  mov r4.w, r3.x
  add r2.xyzw, r2.xyzw, r4.xyzw
  mov r4.x, r5.y
  mov r4.y, r6.y
  mov r4.z, r8.y
  mov r4.w, r3.y
  add r4.xyzw, r4.xyzw, r7.xyzw
  mov r3.x, r5.z
  mov r3.y, r6.z
  mov r3.z, r8.w
  add r1.xyzw, r1.xyzw, r3.xyzw
  mov r8.x, r5.w
  mov r8.y, r6.w
  add r0.xyz, r0.xyzx, r8.xyzx
  mov r3.xyz, v0.xyzx
  mov r3.w, l(1.000000)
  dp4 r0.w, r3.xyzw, r2.xyzw
  dp4 r2.w, r3.xyzw, r4.xyzw
  dp4 r1.w, r3.xyzw, r1.xyzw
  dp3 r3.x, v1.xyzx, r2.xyzx
  dp3 r3.y, v1.xyzx, r4.xyzx
  dp3 r3.z, v1.xyzx, r1.xyzx
  dp3 r3.w, v1.xyzx, r0.xyzx
  dp4 r3.w, r3.xyzw, r3.xyzw
  rsq r3.w, r3.w
  mul r3.xyz, r3.wwww, r3.xyzx
  dp3 r5.x, v2.xyzx, r2.xyzx
  dp3 r5.y, v2.xyzx, r4.xyzx
  dp3 r5.z, v2.xyzx, r1.xyzx
  dp3 r5.w, v2.xyzx, r0.xyzx
  dp4 r0.x, r5.xyzw, r5.xyzw
  rsq r0.x, r0.x
  mul r0.xyz, r0.xxxx, r5.xyzx
else 
  mov r0.w, v0.x
  mov r2.w, v0.y
  mov r1.w, v0.z
  mov r3.xyz, v1.xyzx
  mov r0.xyz, v2.xyzx
endif 
mul r4.xyzw, cb0[0].yyyy, cb1[1].xyzw
mad r4.xyzw, cb0[0].xxxx, cb1[0].xyzw, r4.xyzw
mad r4.xyzw, cb0[0].zzzz, cb1[2].xyzw, r4.xyzw
mad r4.xyzw, cb0[0].wwww, cb1[3].xyzw, r4.xyzw
mul r5.xyzw, cb0[1].yyyy, cb1[1].xyzw
mad r5.xyzw, cb0[1].xxxx, cb1[0].xyzw, r5.xyzw
mad r5.xyzw, cb0[1].zzzz, cb1[2].xyzw, r5.xyzw
mad r5.xyzw, cb0[1].wwww, cb1[3].xyzw, r5.xyzw
mul r6.xyzw, cb0[2].yyyy, cb1[1].xyzw
mad r6.xyzw, cb0[2].xxxx, cb1[0].xyzw, r6.xyzw
mad r6.xyzw, cb0[2].zzzz, cb1[2].xyzw, r6.xyzw
mad r6.xyzw, cb0[2].wwww, cb1[3].xyzw, r6.xyzw
mul r7.xyzw, cb0[3].yyyy, cb1[1].xyzw
mad r7.xyzw, cb0[3].xxxx, cb1[0].xyzw, r7.xyzw
mad r7.xyzw, cb0[3].zzzz, cb1[2].xyzw, r7.xyzw
mad r7.xyzw, cb0[3].wwww, cb1[3].xyzw, r7.xyzw
mul r5.xyzw, r2.wwww, r5.xyzw
mad r4.xyzw, r0.wwww, r4.xyzw, r5.xyzw
mad r4.xyzw, r1.wwww, r6.xyzw, r4.xyzw
add o0.xyzw, r7.xyzw, r4.xyzw
mul r2.xyzw, r2.wwww, cb0[1].xyzw
mad r2.xyzw, r0.wwww, cb0[0].xyzw, r2.xyzw
mad r1.xyzw, r1.wwww, cb0[2].xyzw, r2.xyzw
add o1.xyzw, r1.xyzw, cb0[3].xyzw
mul r1.xyzw, r3.yyyy, cb0[1].xyzw
mad r1.xyzw, r3.xxxx, cb0[0].xyzw, r1.xyzw
mad r1.xyzw, r3.zzzz, cb0[2].xyzw, r1.xyzw
dp4 r0.w, r1.xyzw, r1.xyzw
rsq r0.w, r0.w
mul o2.xyzw, r0.wwww, r1.xyzw
mul r1.xyzw, r0.yyyy, cb0[1].xyzw
mad r1.xyzw, r0.xxxx, cb0[0].xyzw, r1.xyzw
mad r0.xyzw, r0.zzzz, cb0[2].xyzw, r1.xyzw
dp4 r0.w, r0.xyzw, r0.xyzw
rsq r0.w, r0.w
mul o3.xyz, r0.wwww, r0.xyzx
mov o3.w, v2.w
mov o4.xy, v3.xyxx
ret 
// Approximately 238 instruction slots used
